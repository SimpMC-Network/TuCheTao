buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        // Pull in the RCON-Java client
        classpath 'org.glavo:rcon-java:3.0'
    }
}
plugins {
    id 'java'
    // Note: We apply the shadow plugin only in the modules that need it.
    id 'com.gradleup.shadow' version '8.3.3' apply false
}

group = 'me.typical'
version = '1.0-BETA'
subprojects {
    apply plugin: 'java-library'

    repositories {
        mavenCentral()
        maven {
            name = "papermc-repo"
            url = "https://repo.papermc.io/repository/maven-public/"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/groups/public/"
        }
        maven {
            name = "jitpack"
            url = "https://jitpack.io"
        }
        maven {
            name = "codemc-releases"
            url = "https://repo.codemc.io/repository/maven-releases/"
        }
        maven {
            name = "codemc-snapshots"
            url = "https://repo.codemc.io/repository/maven-snapshots/"
        }
        maven {
            url = 'https://repo.extendedclip.com/releases/'
        }
        maven {
            name = 'rosewood-playerpoints'
            url = 'https://repo.rosewooddev.io/repository/public/'
        }
        maven {
            name = 'mojang-ass'
            url = 'https://libraries.minecraft.net/'
        }
        maven {
            name = 'nightexpress'
            url = 'https://repo.nightexpressdev.com/releases'
        }
        maven {
            name = 'phoenix'
            url = "https://nexus.phoenixdevt.fr/repository/maven-public/"
        }
        maven {
            name = 'matteodev'
            url = 'https://maven.devs.beer/'
        }
    }
}

// Set the Java version for all subprojects
def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

import org.glavo.rcon.Rcon

tasks.register('sendRconCommand') {
    description = 'Sends "res" command to the Minecraft server via RCON'
    doLast {
        def host = 'localhost'          // your server IP or hostname
        def port = 25575                // your RCON port
        def password = '123123123' // your RCON password
        def command = 'res' // the command you want to send
        // Send the command and capture the response
        Rcon rcon = null
        try {
            rcon = new Rcon(host, port, password)
            String response = rcon.command(command)
            println "RCON Response: $response"

        } catch (SocketException e) {
            // Connection reset is expected when the server stops itself
            println "üîå Connection reset by server (expected if it just stopped). Ignoring."
        } catch (Exception e) {
            // Other RCON or IO errors
            println "‚ùó Unexpected error sending RCON command: ${e.class.simpleName}: ${e.message}"
        } finally {
            if (rcon != null) {
                try {
                    rcon.close()
                } catch (Exception ignored) {
                }
            }
        }
        println "‚è± Waiting 5 second..."
        Thread.sleep(5000)
    }
}

